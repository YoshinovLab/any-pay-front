{
  "openapi": "3.1.0",
  "info": {
    "title": "Tamba Pay API",
    "license": {
      "name": "Mozilla Public License Version 2.0",
      "identifier": "MPL-2.0",
      "url": "https://opensource.org/license/MPL-2.0"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "サーバーの稼働状況とデータベース接続を確認するエンドポイント\n\nReturns:\n    HealthResponse: サーバーとデータベースの状態情報",
        "operationId": "health_check__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HealthResponse" }
              }
            }
          }
        }
      }
    },
    "/health/": {
      "get": {
        "tags": ["Health"],
        "summary": "Health Check",
        "description": "サーバーの稼働状況とデータベース接続を確認するエンドポイント\n\nReturns:\n    HealthResponse: サーバーとデータベースの状態情報",
        "operationId": "health_check_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HealthResponse" }
              }
            }
          }
        }
      }
    },
    "/hello": {
      "get": {
        "summary": "Hello",
        "description": "Hello API.\n\n挨拶する処理.\n\nArgs:\n    name: 挨拶対象の名前. デフォルト値は \"World\".\n\nReturns:\n    HelloRes: 返却値のスキーマ",
        "operationId": "hello_hello_get",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "挨拶対象の名前",
              "default": "World",
              "title": "Name"
            },
            "description": "挨拶対象の名前"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HelloRes" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": ["Users"],
        "summary": "Read Users",
        "description": "ユーザー一覧を取得するエンドポイント\n\nArgs:\n    skip: スキップするレコード数\n    limit: 取得するレコード上限数(最大1万件)\n    name: ユーザー名での検索(部分一致)\n    email: メールアドレスでの検索(部分一致)\n    phone: 電話番号での検索(部分一致)\n    date_of_birth: 生年月日\n    db: DBセッション(依存性注入)\n\nReturns:\n    ユーザー情報のリストと総件数を含むレスポンス",
        "operationId": "read_users_user__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Skip" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 100, "title": "Limit" }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Name"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Email"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Phone"
            }
          },
          {
            "name": "date_of_birth",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string", "format": "date" },
                { "type": "null" }
              ],
              "title": "Date Of Birth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserListResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create User",
        "description": "新規ユーザーを作成するエンドポイント\n\nArgs:\n    user: 作成するユーザーの情報\n    db: DBセッション(依存性注入)\n\nReturns:\n    作成されたユーザー情報",
        "operationId": "create_user_user__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/user/{user_id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Read User",
        "description": "指定IDのユーザー情報を取得するエンドポイント\n\nArgs:\n    user_id: 取得するユーザーのID\n    db: DBセッション(依存性注入)\n\nRaises:\n    HTTPException: ユーザーが見つからない場合は404エラー\n\nReturns:\n    ユーザー情報",
        "operationId": "read_user_user__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "User Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User Put",
        "description": "ユーザー情報を更新するエンドポイント(PUT)\n\nArgs:\n    user_id: ユーザーID\n    user: 更新するユーザーの情報\n    db: DBセッション(依存性注入)\n\nRaises:\n    HTTPException: ユーザーが見つからない場合は404エラー\n\nReturns:\n    更新されたユーザー情報",
        "operationId": "update_user_put_user__user_id__put",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "User Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update User Patch",
        "description": "ユーザー情報の一部を更新するエンドポイント(PATCH)\n\nArgs:\n    user_id: ユーザーID\n    user: 更新するユーザーの情報\n    db: DBセッション(依存性注入)\n\nRaises:\n    HTTPException: ユーザーが見つからない場合は404エラー\n\nReturns:\n    更新されたユーザー情報",
        "operationId": "update_user_patch_user__user_id__patch",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "User Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "description": "ユーザーを削除するエンドポイント\n\nArgs:\n    user_id: ユーザーID\n    db: DBセッション(依存性注入)\n\nRaises:\n    HTTPException: ユーザーが見つからない場合は404エラー\n\nReturns:\n    なし(204 No Content)",
        "operationId": "delete_user_user__user_id__delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "User Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/transaction/": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Read Transactions",
        "description": "トランザクション一覧を取得するエンドポイント\n\n指定された条件に基づいてトランザクションの一覧を取得します。\nページネーションとユーザーIDによるフィルタリングをサポートします。\n\nArgs:\n    skip: スキップするレコード数\n    limit: 取得するレコード上限数(最大1000件)\n    user_id: 特定のユーザーのトランザクションのみを取得する場合のID\n    db: DBセッション(依存性注入)\n\nReturns:\n    トランザクション情報のリストと総件数を含むレスポンス\n\nStatus Codes:\n    200 OK: 正常にデータを取得",
        "operationId": "read_transactions_transaction__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 0, "title": "Skip" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": { "type": "integer", "default": 100, "title": "Limit" }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [{ "type": "integer" }, { "type": "null" }],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功時のレスポンス",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Create Transaction",
        "description": "新規トランザクションを作成するエンドポイント\n\nトランザクション情報を受け取り、検証した上で実行します。\n\nトランザクション処理のビジネスルール:\n1. 送金元と送金先の両方がnull/0であってはならない\n2. 指定されたトランザクション種別コードは存在する必要がある\n3. 指定されたトランザクション種別コードは実装されている必要がある\n4. 送金元/送金先ユーザーは存在する必要がある\n5. 送金元/送金先アカウントが凍結されていないこと\n6. 送金元の残高が十分であること(bypassフラグがない場合)\n7. 送金元の負債上限を超えないこと(bypassフラグがない場合)\n8. システム全体の負債上限を超えないこと(bypassフラグがない場合)\n\nArgs:\n    transaction: 作成するトランザクションの情報\n    db: DBセッション(依存性注入)\n\nReturns:\n    作成されたトランザクション情報\n\nRaises:\n    HTTPException: リクエストが不正な場合や残高不足などの場合にエラー",
        "operationId": "create_transaction_transaction__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TransactionCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "トランザクション作成成功",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "202": {
            "description": "強制支払いトランザクション実行",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "400": {
            "description": "パラメータ不正",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "アカウント凍結などの権限エラー",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "指定されたユーザーが存在しない",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "残高不足または負債上限超過",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "501": {
            "description": "指定されたトランザクション種別は未実装",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/transaction/entry-types": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get Entry Types",
        "description": "トランザクション種別の一覧を取得するエンドポイント\n\nシステムに登録されているすべてのトランザクション種別を取得します。\n\nArgs:\n    db: DBセッション(依存性注入)\n\nReturns:\n    トランザクション種別一覧のレスポンス\n\nStatus Codes:\n    200 OK: 正常にデータを取得",
        "operationId": "get_entry_types_transaction_entry_types_get",
        "responses": {
          "200": {
            "description": "成功時のレスポンス",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntryTypeListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/{transaction_id}": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Read Transaction",
        "description": "指定IDのトランザクション情報を取得するエンドポイント\n\n指定されたIDのトランザクション詳細を取得します。\n\nArgs:\n    transaction_id: 取得するトランザクションのID\n    db: DBセッション(依存性注入)\n\nReturns:\n    トランザクション情報\n\nRaises:\n    HTTPException: トランザクションが見つからない場合は404エラー\n\nStatus Codes:\n    200 OK: 正常にデータを取得\n    404 Not Found: 指定されたIDのトランザクションが存在しない",
        "operationId": "read_transaction_transaction__transaction_id__get",
        "parameters": [
          {
            "name": "transaction_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "Transaction Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "成功時のレスポンス",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TransactionResponse" }
              }
            }
          },
          "404": {
            "description": "トランザクションが見つからない",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/": {
      "post": {
        "tags": ["Checks"],
        "summary": "Create Check",
        "description": "小切手を発行する\n\n認証済みユーザーが小切手を発行します。ユーザーの残高が十分であれば、\n指定した金額が一時的にシステムアカウントへ移動され、小切手が発行されます。\n    check_in: 小切手作成情報(金額、メモ、摘要)\n    db: データベースセッション\n    issuer_user_id: 発行者ユーザーID\n\nReturns:\n    作成された小切手の情報\n\nRaises:\n    HTTPException(400):\n        - 残高不足\n        - 発行者が存在しない\n        - システムユーザーが設定されていない",
        "operationId": "create_check_check__post",
        "parameters": [
          {
            "name": "issuer_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Issuer User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CheckCreate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckResponse" }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/{check_id}": {
      "get": {
        "tags": ["Checks"],
        "summary": "Get Check",
        "description": "小切手情報を取得する\n\n指定されたIDの小切手情報を公開APIとして取得します。\nこの情報は認証なしでもアクセスでき、小切手の受取者が確認するために使用されます。\n\nParameters:\n    check_id: 取得する小切手のID\n    db: データベースセッション\n\nReturns:\n    小切手情報\n\nRaises:\n    HTTPException(404): 小切手が存在しない\n    HTTPException(400): 小切手の有効期限が切れている",
        "operationId": "get_check_check__check_id__get",
        "parameters": [
          {
            "name": "check_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "取得する小切手のID" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckResponse" }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/{check_id}/claim/init": {
      "get": {
        "tags": ["Checks"],
        "summary": "Init Claim Check",
        "description": "小切手の受取処理を開始し、CSRFトークン(Nonce)を生成\n\n小切手を受け取るための最初のステップです。CSRFトークンを生成し、\nクッキーに設定します。このトークンは次のステップ (実際の受取処理)で\n検証されます。\n\nParameters:\n    check_id: 受け取る小切手のID\n    response: レスポンスオブジェクト (クッキー設定用)\n    db: データベースセッション\n\nReturns:\n    生成されたNonce情報\n\nRaises:\n    HTTPException(404): 小切手が存在しない\n    HTTPException(400): 小切手の有効期限が切れている",
        "operationId": "init_claim_check_check__check_id__claim_init_get",
        "parameters": [
          {
            "name": "check_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "受け取る小切手のID" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NonceResponse" }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/{check_id}/claim": {
      "post": {
        "tags": ["Checks"],
        "summary": "Claim Check",
        "description": "小切手を受け取る(CSRFトークンの検証あり)\n\n認証済みユーザーが小切手を受け取ります。CSRFトークンの検証を行い、\n正当なリクエストであれば小切手の金額がシステムアカウントから\n受取人のアカウントに移動します。小切手データは削除されます。\n\nParameters:\n    check_id: 受け取る小切手のID\n    nonce: CSRFトークン (リクエストボディに含まれる)\n    recipient_id: 受取人のユーザーID\n    db: データベースセッション\n    check_claim_nonce: クッキーに保存されたCSRFトークン\n\nReturns:\n    処理結果のメッセージ\n\nRaises:\n    HTTPException(400):\n        - CSRFトークンが無効\n        - 小切手が存在しない\n        - 小切手の有効期限が切れている\n        - その他のエラー",
        "operationId": "claim_check_check__check_id__claim_post",
        "parameters": [
          {
            "name": "check_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "受け取る小切手のID" }
          },
          {
            "name": "nonce",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Nonce" }
          },
          {
            "name": "recipient_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Recipient Id"
            }
          },
          {
            "name": "check_claim_nonce",
            "in": "cookie",
            "required": true,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Check Claim Nonce"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckClaimResponse" }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/{check_id}/reclaim": {
      "post": {
        "tags": ["Checks"],
        "summary": "Reclaim Check",
        "description": "小切手の組み戻し処理(発行者自身が受け取る)\n\n発行者が自分で発行した小切手を取り消す (組み戻す)処理です。\n実質的には自分自身が受取人として小切手を受け取る操作と同じですが、\n発行者本人かどうかのチェックが追加されています。\n\nParameters:\n    check_id: 組み戻す小切手のID\n    nonce: CSRFトークン (リクエストボディに含まれる)\n    db: データベースセッション\n    current_user: 認証済みの現在のユーザー\n    check_claim_nonce: クッキーに保存されたCSRFトークン\n\nReturns:\n    処理結果のメッセージ\n\nRaises:\n    HTTPException(400):\n        - CSRFトークンが無効\n        - 小切手が存在しない\n        - 小切手の有効期限が切れている\n        - その他のエラー\n    HTTPException(403): 発行者本人でない場合",
        "operationId": "reclaim_check_check__check_id__reclaim_post",
        "parameters": [
          {
            "name": "check_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "title": "組み戻す小切手のID" }
          },
          {
            "name": "nonce",
            "in": "query",
            "required": true,
            "schema": { "type": "string", "title": "Nonce" }
          },
          {
            "name": "issuer_user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Issuer User Id"
            }
          },
          {
            "name": "check_claim_nonce",
            "in": "cookie",
            "required": true,
            "schema": {
              "anyOf": [{ "type": "string" }, { "type": "null" }],
              "title": "Check Claim Nonce"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckClaimResponse" }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/check/user/{user_id}": {
      "get": {
        "tags": ["Checks"],
        "summary": "Get Checks By User",
        "description": "指定されたユーザーが発行した未受取の小切手を全て取得する",
        "operationId": "get_checks_by_user_check_user__user_id__get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer", "title": "ユーザーID" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/CheckResponse" },
                  "title": "Response Get Checks By User Check User  User Id  Get"
                }
              }
            }
          },
          "404": { "description": "存在しないリソースへの要求" },
          "400": {
            "description": "無効又は不正なリクエスト",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CheckCreateError" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AttributeValueResponse": {
        "properties": {
          "value": { "type": "string", "title": "Value" },
          "label": { "type": "string", "title": "Label" }
        },
        "type": "object",
        "required": ["value", "label"],
        "title": "AttributeValueResponse",
        "description": "ユーザー属性値のレスポンススキーマ"
      },
      "CheckClaimResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "小切手受取のステータス",
            "examples": ["success"]
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "小切手受取の結果メッセージ",
            "examples": ["小切手の受取が完了しました"]
          }
        },
        "type": "object",
        "required": ["status", "message"],
        "title": "CheckClaimResponse",
        "description": "小切手受取レスポンススキーマ\n\n小切手を受け取る際のレスポンス形式を定義します。\n受取人のユーザーID、受取日時、トランザクションIDを含みます。"
      },
      "CheckCreate": {
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "小切手の金額"
          },
          "memo": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Memo",
            "description": "送金者のみ閲覧可能なメモ"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "送金者・受取人双方が閲覧可能な摘要"
          }
        },
        "type": "object",
        "required": ["amount"],
        "title": "CheckCreate",
        "description": "小切手作成リクエストスキーマ\n\nAPIで小切手を発行するときに使用するリクエストの形式を定義します。\n基本的な小切手情報 (金額、メモ、摘要 )を含みます。"
      },
      "CheckCreateError": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "エラーメッセージ"
          }
        },
        "type": "object",
        "required": ["detail"],
        "title": "CheckCreateError",
        "description": "小切手作成エラー情報スキーマ\n\n小切手作成時に発生するエラー情報を返すためのスキーマです。\nエラーコードとメッセージを含みます。"
      },
      "CheckResponse": {
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "小切手の金額"
          },
          "memo": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Memo",
            "description": "送金者のみ閲覧可能なメモ"
          },
          "description": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Description",
            "description": "送金者・受取人双方が閲覧可能な摘要"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "issuer_user_id": { "type": "integer", "title": "Issuer User Id" },
          "issued_at": {
            "type": "string",
            "format": "date-time",
            "title": "Issued At"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "amount",
          "id",
          "issuer_user_id",
          "issued_at",
          "expires_at"
        ],
        "title": "CheckResponse",
        "description": "小切手レスポンススキーマ\n\nAPIから返される小切手情報の形式を定義します。\n基本的な小切手情報に加えて、ID、発行者ID、発行日時、有効期限を含みます。"
      },
      "EntryTypeListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/EntryTypeResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["items", "total"],
        "title": "EntryTypeListResponse",
        "description": "トランザクション種別一覧のレスポンススキーマ\n\nAttributes:\n    items: トランザクション種別のリスト\n    total: 総件数"
      },
      "EntryTypeResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "code": { "type": "string", "title": "Code" },
          "name": { "type": "string", "title": "Name" }
        },
        "type": "object",
        "required": ["id", "code", "name"],
        "title": "EntryTypeResponse",
        "description": "エントリータイプのレスポンススキーマ\n\nAttributes:\n    id: エントリータイプID\n    code: エントリータイプコード\n    name: エントリータイプ名"
      },
      "ErrorResponse": {
        "properties": {
          "status_code": { "type": "integer", "title": "Status Code" },
          "detail": { "type": "string", "title": "Detail" },
          "error_type": {
            "type": "string",
            "title": "Error Type",
            "description": "エラーの種類",
            "default": "api_error"
          }
        },
        "type": "object",
        "required": ["status_code", "detail"],
        "title": "ErrorResponse",
        "description": "エラーレスポンススキーマ\n\nAPIエラーの詳細情報を格納するスキーマです。\n\nAttributes:\n    status_code: HTTPステータスコード\n    detail: エラーの詳細メッセージ\n    error_type: エラーの種類"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthDetails": {
        "properties": {
          "server": { "type": "string", "title": "Server" },
          "database": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Database"
          },
          "error": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Error"
          }
        },
        "type": "object",
        "required": ["server"],
        "title": "HealthDetails",
        "description": "データベースの詳細情報を表すモデル"
      },
      "HealthResponse": {
        "properties": {
          "status": { "type": "string", "title": "Status" },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "database_status": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Database Status"
          },
          "details": { "$ref": "#/components/schemas/HealthDetails" }
        },
        "type": "object",
        "required": ["status", "timestamp", "details"],
        "title": "HealthResponse",
        "description": "サーバーとデータベースの状態情報を表すレスポンスモデル"
      },
      "HelloRes": {
        "properties": { "hello": { "type": "string", "title": "Hello" } },
        "type": "object",
        "required": ["hello"],
        "title": "HelloRes",
        "description": "Response model for hello endpoint."
      },
      "NonceResponse": {
        "properties": {
          "nonce": {
            "type": "string",
            "title": "Nonce",
            "description": "CSRFトークンとして使用するNonce"
          }
        },
        "type": "object",
        "required": ["nonce"],
        "title": "NonceResponse",
        "description": "NonceレスポンススキーマASecure接頭辞に対して\n\nCSRF対策のためのNonce (使い捨てトークン )情報を返すためのスキーマです。\n小切手の受取処理開始時に生成され、実際の受取処理時に検証されます。"
      },
      "TransactionCreate": {
        "properties": {
          "from_user_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "From User Id",
            "description": "送金元ユーザーID (ATM入出金時はNullまたは0)"
          },
          "to_user_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "To User Id",
            "description": "送金先ユーザーID (ATM入出金時はNullまたは0)"
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "取引金額"
          },
          "memo": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Memo",
            "description": "取引メモ"
          },
          "entry_type_code": {
            "type": "string",
            "title": "Entry Type Code",
            "description": "トランザクション種別コード"
          },
          "bypass": {
            "type": "boolean",
            "title": "Bypass",
            "description": "残高チェックをバイパスするフラグ",
            "default": false
          }
        },
        "type": "object",
        "required": ["amount", "entry_type_code"],
        "title": "TransactionCreate",
        "description": "トランザクション作成リクエストスキーマ\n\nトランザクションの作成に必要な情報を格納します。\n\nAttributes:\n    entry_type_code: トランザクション種別コード(単一)\n        - \"GARNISHMENT\": 差押\n        - \"REMIT\": 振込(送金)\n        - \"ISS-CHECK\": 為替·小切手払出\n        - \"ATM-WITHDRAW\": 出金\n        - \"FREEZE\": 凍結\n        - \"ATM-DEPOSIT\": 入金\n        - \"RSV-CHECK\": 為替·小切手(受取)\n        - \"RSV-REMIT\": 振込(受取)\n    bypass: 残高チェックをバイパスするフラグ (true: チェックをスキップ)\n\nRaises:\n    ValueError: 取引金額が上限を超えた場合、または金額が正の値でない場合"
      },
      "TransactionListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/TransactionResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "skip": { "type": "integer", "title": "Skip" },
          "limit": { "type": "integer", "title": "Limit" }
        },
        "type": "object",
        "required": ["items", "total", "skip", "limit"],
        "title": "TransactionListResponse",
        "description": "トランザクション一覧レスポンススキーマ\n\nページネーション情報付きのトランザクション一覧を返すためのスキーマです。\n\nAttributes:\n    items: トランザクションのリスト\n    total: 総件数\n    skip: スキップ件数\n    limit: 1ページあたりの件数"
      },
      "TransactionResponse": {
        "properties": {
          "from_user_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "From User Id",
            "description": "送金元ユーザーID (ATM入出金時はNullまたは0)"
          },
          "to_user_id": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "To User Id",
            "description": "送金先ユーザーID (ATM入出金時はNullまたは0)"
          },
          "amount": {
            "type": "integer",
            "title": "Amount",
            "description": "取引金額"
          },
          "memo": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Memo",
            "description": "取引メモ"
          },
          "id": { "type": "string", "title": "Id" },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "entry_types": {
            "items": { "$ref": "#/components/schemas/EntryTypeResponse" },
            "type": "array",
            "title": "Entry Types"
          }
        },
        "type": "object",
        "required": ["amount", "id", "created_at", "entry_types"],
        "title": "TransactionResponse",
        "description": "トランザクションレスポンススキーマ\n\nトランザクションの情報を返すためのスキーマです。\n\nAttributes:\n    id: トランザクションID\n    created_at: トランザクション作成日時\n    entry_types: トランザクション種別情報リスト"
      },
      "UserCoreProfileBase": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          }
        },
        "type": "object",
        "title": "UserCoreProfileBase",
        "description": "ユーザーの基本プロファイル情報(変更不可項目)のベーススキーマ"
      },
      "UserCoreProfileResponse": {
        "properties": {
          "date_of_birth": {
            "anyOf": [
              { "type": "string", "format": "date" },
              { "type": "null" }
            ],
            "title": "Date Of Birth"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": ["created_at"],
        "title": "UserCoreProfileResponse",
        "description": "ユーザーの基本プロファイル情報のレスポンススキーマ"
      },
      "UserCreate": {
        "properties": {
          "balance": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Balance",
            "default": 0
          },
          "core_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserCoreProfileBase" },
              { "type": "null" }
            ]
          },
          "editable_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEditableProfileBase" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UserCreate",
        "description": "ユーザー作成用のスキーマ"
      },
      "UserEditableProfileBase": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          }
        },
        "type": "object",
        "title": "UserEditableProfileBase",
        "description": "ユーザーの編集可能プロファイル情報のベーススキーマ"
      },
      "UserEditableProfileResponse": {
        "properties": {
          "name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Name"
          },
          "email": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Email"
          },
          "phone": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Phone"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": ["updated_at"],
        "title": "UserEditableProfileResponse",
        "description": "ユーザーの編集可能プロファイル情報のレスポンススキーマ"
      },
      "UserListResponse": {
        "properties": {
          "items": {
            "items": { "$ref": "#/components/schemas/UserResponse" },
            "type": "array",
            "title": "Items"
          },
          "total": { "type": "integer", "title": "Total" },
          "skip": { "type": "integer", "title": "Skip" },
          "limit": { "type": "integer", "title": "Limit" }
        },
        "type": "object",
        "required": ["items", "total", "skip", "limit"],
        "title": "UserListResponse",
        "description": "ユーザー一覧のレスポンススキーマ(ページネーション情報付き)"
      },
      "UserResponse": {
        "properties": {
          "id": { "type": "integer", "title": "Id" },
          "balance": { "type": "integer", "title": "Balance" },
          "core_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserCoreProfileResponse" },
              { "type": "null" }
            ]
          },
          "editable_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEditableProfileResponse" },
              { "type": "null" }
            ]
          },
          "attrs": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/AttributeValueResponse"
                },
                "type": "object"
              },
              { "type": "null" }
            ],
            "title": "Attrs"
          }
        },
        "type": "object",
        "required": ["id", "balance"],
        "title": "UserResponse",
        "description": "ユーザー情報のレスポンススキーマ"
      },
      "UserUpdate": {
        "properties": {
          "balance": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Balance"
          },
          "editable_profile": {
            "anyOf": [
              { "$ref": "#/components/schemas/UserEditableProfileBase" },
              { "type": "null" }
            ]
          }
        },
        "type": "object",
        "title": "UserUpdate",
        "description": "ユーザー更新用のスキーマ"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "Documentation License",
      "description": "ドキュメントライセンス (Documentation License)",
      "externalDocs": {
        "description": "Documentation License",
        "url": "https://github.com/YoshinovLab/tamba-pay/blob/main/DOCS-LICENSE.md"
      }
    },
    { "name": "Health", "description": "システムの正常性チェック" },
    { "name": "Users", "description": "ユーザー管理" },
    { "name": "Transactions", "description": "取引履歴管理" },
    { "name": "Checks", "description": "小切手管理" }
  ]
}
